AWSTemplateFormatVersion: "2010-09-09"
Description: Enable streaming Amazon Connect calls to Deepgram

Parameters:
  deepgramApiKey:
    Description: The Deepgram API key that will be used for transcription
    Type: String
  vpcId:
    Description: VPC where the resources will be deployed
    Type: AWS::EC2::VPC::Id
  subnets:
    Description: Subnets where the resources will be deployed
    Type: List<AWS::EC2::Subnet::Id>

Resources:
  kvsDgTriggerRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  kvsDgTriggerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: "Retain" # TODO remove this. It's just for faster development since deleting a lambda in a VPC takes forever
    Properties:
      GroupDescription: Security group for kvs-dg-trigger Lambda function
      VpcId: !Ref vpcId
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
          IpProtocol: "-1"

  kvsDgTrigger:
    Type: "AWS::Lambda::Function"
    DeletionPolicy: "Retain" # TODO remove this. It's just for faster development since deleting a lambda in a VPC takes forever
    Properties:
      Role: !GetAtt kvsDgTriggerRole.Arn
      Timeout: 900
      Environment:
        Variables:
          KVS_DG_INTEGRATOR_DOMAIN: !GetAtt kvsDgIntegratorLoadBalancer.DNSName
          LOG_LEVEL: "info"
          # LOAD_TEST_NUM_SESSIONS: "20" # load testing only
          # LOAD_TEST_INTERVAL_MS: "15000" # load testing only
      PackageType: "Image"
      Code:
        ImageUri: 396185571030.dkr.ecr.us-east-1.amazonaws.com/kvs-dg-trigger:latest
      VpcConfig:
        SecurityGroupIds:
          - !Ref kvsDgTriggerSecurityGroup
        SubnetIds: !Ref subnets

  kvsDgIntegratorEcsCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: kvs-dg-integrator-cluster
      # ClusterSettings:
      #   - Name: containerInsights # load testing only
      #     Value: enabled

  kvsDgIntegratorExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: kvsDgIntegratorExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      Policies:
        - PolicyName: "CloudWatchLogsCreateLogGroup"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                Resource: "*"

  kvsDgIntegratorTaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: kvsDgIntegratorTaskRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonKinesisVideoStreamsReadOnlyAccess"

  kvsDgIntegratorTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Name: kvs-dg-integrator-container
          Image: 396185571030.dkr.ecr.us-east-1.amazonaws.com/kvs-dg-integrator:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-stream-prefix: ecs
              awslogs-region: !Ref "AWS::Region"
              awslogs-group: kvs-dg-integrator
              awslogs-create-group: "true"
          Environment:
            - Name: DEEPGRAM_API_KEY
              Value: !Ref deepgramApiKey
            - Name: APP_REGION
              Value: !Ref "AWS::Region"
            # - Name: ENFORCE_REALTIME # load testing only
            #   Value: "true"
          PortMappings:
            - HostPort: 80
              ContainerPort: 80
              Protocol: tcp
              AppProtocol: http
      Cpu: "256"
      ExecutionRoleArn: !GetAtt kvsDgIntegratorExecutionRole.Arn
      TaskRoleArn: !GetAtt kvsDgIntegratorTaskRole.Arn
      Family: kvs-dg-integrator-task-family
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        OperatingSystemFamily: LINUX

  kvsDgIntegratorEcsServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for kvs-dg-integrator Fargate task
      VpcId: !Ref vpcId
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
          IpProtocol: "-1"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref kvsDgIntegratorLoadBalancerSecurityGroup

  kvsDgIntegratorEcsService:
    Type: AWS::ECS::Service
    DependsOn: kvsDgIntegratorLoadBalancerListener
    Properties:
      Cluster: !Ref kvsDgIntegratorEcsCluster
      TaskDefinition: !Ref kvsDgIntegratorTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Ref subnets
          SecurityGroups:
            - !Ref kvsDgIntegratorEcsServiceSecurityGroup
      LoadBalancers:
        - TargetGroupArn: !Ref kvsDgIntegratorLoadBalancerTargetGroup
          ContainerName: kvs-dg-integrator-container
          ContainerPort: 80

  kvsDgIntegratorLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for kvs-dg-integrator load balancer
      VpcId: !Ref vpcId
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
          IpProtocol: "-1"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref kvsDgTriggerSecurityGroup

  kvsDgIntegratorLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: internal
      Subnets: !Ref subnets
      SecurityGroups: [!Ref kvsDgIntegratorLoadBalancerSecurityGroup]

  kvsDgIntegratorLoadBalancerTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      VpcId: !Ref vpcId
      Port: 80
      Protocol: "HTTP"
      TargetType: "ip"
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/health-check"
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  kvsDgIntegratorLoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref kvsDgIntegratorLoadBalancerTargetGroup
          Type: "forward"
      LoadBalancerArn: !Ref kvsDgIntegratorLoadBalancer
      Port: 80
      Protocol: "HTTP"
